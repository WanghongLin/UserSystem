// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: usersystem.proto

#include "usersystem.pb.h"
#include "usersystem.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace usersystem {

static const char* UserSystem_method_names[] = {
  "/usersystem.UserSystem/Register",
  "/usersystem.UserSystem/Login",
  "/usersystem.UserSystem/CheckLogin",
  "/usersystem.UserSystem/Logout",
};

std::unique_ptr< UserSystem::Stub> UserSystem::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserSystem::Stub> stub(new UserSystem::Stub(channel));
  return stub;
}

UserSystem::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Register_(UserSystem_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(UserSystem_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckLogin_(UserSystem_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Logout_(UserSystem_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserSystem::Stub::Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::usersystem::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

void UserSystem::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void UserSystem::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void UserSystem::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

void UserSystem::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::usersystem::RegisterResponse>* UserSystem::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::usersystem::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::usersystem::RegisterResponse>* UserSystem::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::usersystem::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::Status UserSystem::Stub::Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::usersystem::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void UserSystem::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void UserSystem::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void UserSystem::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void UserSystem::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::usersystem::LoginResponse>* UserSystem::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::usersystem::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::usersystem::LoginResponse>* UserSystem::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::usersystem::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::ClientReader< ::usersystem::CheckLoginResponse>* UserSystem::Stub::CheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::usersystem::CheckLoginResponse>::Create(channel_.get(), rpcmethod_CheckLogin_, context, request);
}

void UserSystem::Stub::experimental_async::CheckLogin(::grpc::ClientContext* context, ::usersystem::CheckLoginRequest* request, ::grpc::experimental::ClientReadReactor< ::usersystem::CheckLoginResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::usersystem::CheckLoginResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CheckLogin_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::usersystem::CheckLoginResponse>* UserSystem::Stub::AsyncCheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::usersystem::CheckLoginResponse>::Create(channel_.get(), cq, rpcmethod_CheckLogin_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::usersystem::CheckLoginResponse>* UserSystem::Stub::PrepareAsyncCheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::usersystem::CheckLoginResponse>::Create(channel_.get(), cq, rpcmethod_CheckLogin_, context, request, false, nullptr);
}

::grpc::Status UserSystem::Stub::Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::usersystem::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void UserSystem::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void UserSystem::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void UserSystem::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

void UserSystem::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::usersystem::CommonResponse>* UserSystem::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::usersystem::CommonResponse>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::usersystem::CommonResponse>* UserSystem::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::usersystem::CommonResponse>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, false);
}

UserSystem::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserSystem_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserSystem::Service, ::usersystem::RegisterRequest, ::usersystem::RegisterResponse>(
          std::mem_fn(&UserSystem::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserSystem_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserSystem::Service, ::usersystem::LoginRequest, ::usersystem::LoginResponse>(
          std::mem_fn(&UserSystem::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserSystem_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UserSystem::Service, ::usersystem::CheckLoginRequest, ::usersystem::CheckLoginResponse>(
          std::mem_fn(&UserSystem::Service::CheckLogin), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserSystem_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserSystem::Service, ::usersystem::LogoutRequest, ::usersystem::CommonResponse>(
          std::mem_fn(&UserSystem::Service::Logout), this)));
}

UserSystem::Service::~Service() {
}

::grpc::Status UserSystem::Service::Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserSystem::Service::Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserSystem::Service::CheckLogin(::grpc::ServerContext* context, const ::usersystem::CheckLoginRequest* request, ::grpc::ServerWriter< ::usersystem::CheckLoginResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserSystem::Service::Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace usersystem

