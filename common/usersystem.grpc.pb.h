// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: usersystem.proto
// Original file comments:
// the base protobuf data for a simple user login system
//
#ifndef GRPC_usersystem_2eproto__INCLUDED
#define GRPC_usersystem_2eproto__INCLUDED

#include "usersystem.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace usersystem {

class UserSystem final {
 public:
  static constexpr char const* service_full_name() {
    return "usersystem.UserSystem";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::usersystem::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::usersystem::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::usersystem::CheckLoginResponse>> CheckLogin(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::usersystem::CheckLoginResponse>>(CheckLoginRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::usersystem::CheckLoginResponse>> AsyncCheckLogin(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::usersystem::CheckLoginResponse>>(AsyncCheckLoginRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::usersystem::CheckLoginResponse>> PrepareAsyncCheckLogin(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::usersystem::CheckLoginResponse>>(PrepareAsyncCheckLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::usersystem::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::CommonResponse>> AsyncLogout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::CommonResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::CommonResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::CommonResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckLogin(::grpc::ClientContext* context, ::usersystem::CheckLoginRequest* request, ::grpc::experimental::ClientReadReactor< ::usersystem::CheckLoginResponse>* reactor) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::usersystem::CheckLoginResponse>* CheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::usersystem::CheckLoginResponse>* AsyncCheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::usersystem::CheckLoginResponse>* PrepareAsyncCheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::CommonResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::usersystem::CommonResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::usersystem::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::usersystem::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::usersystem::CheckLoginResponse>> CheckLogin(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::usersystem::CheckLoginResponse>>(CheckLoginRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::usersystem::CheckLoginResponse>> AsyncCheckLogin(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::usersystem::CheckLoginResponse>>(AsyncCheckLoginRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::usersystem::CheckLoginResponse>> PrepareAsyncCheckLogin(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::usersystem::CheckLoginResponse>>(PrepareAsyncCheckLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::usersystem::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::CommonResponse>> AsyncLogout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::CommonResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::CommonResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::usersystem::CommonResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckLogin(::grpc::ClientContext* context, ::usersystem::CheckLoginRequest* request, ::grpc::experimental::ClientReadReactor< ::usersystem::CheckLoginResponse>* reactor) override;
      void Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::usersystem::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::usersystem::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::usersystem::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::usersystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::usersystem::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::usersystem::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::usersystem::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::usersystem::CheckLoginResponse>* CheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request) override;
    ::grpc::ClientAsyncReader< ::usersystem::CheckLoginResponse>* AsyncCheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::usersystem::CheckLoginResponse>* PrepareAsyncCheckLoginRaw(::grpc::ClientContext* context, const ::usersystem::CheckLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::usersystem::CommonResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::usersystem::CommonResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::usersystem::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response);
    virtual ::grpc::Status CheckLogin(::grpc::ServerContext* context, const ::usersystem::CheckLoginRequest* request, ::grpc::ServerWriter< ::usersystem::CheckLoginResponse>* writer);
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::usersystem::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::usersystem::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::usersystem::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::usersystem::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckLogin() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLogin(::grpc::ServerContext* context, const ::usersystem::CheckLoginRequest* request, ::grpc::ServerWriter< ::usersystem::CheckLoginResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckLogin(::grpc::ServerContext* context, ::usersystem::CheckLoginRequest* request, ::grpc::ServerAsyncWriter< ::usersystem::CheckLoginResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::usersystem::LogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::usersystem::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Login<WithAsyncMethod_CheckLogin<WithAsyncMethod_Logout<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Register() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::usersystem::RegisterRequest, ::usersystem::RegisterResponse>(
          [this](::grpc::ServerContext* context,
                 const ::usersystem::RegisterRequest* request,
                 ::usersystem::RegisterResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Register(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Register(
        ::grpc::experimental::MessageAllocator< ::usersystem::RegisterRequest, ::usersystem::RegisterResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::usersystem::RegisterRequest, ::usersystem::RegisterResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::usersystem::LoginRequest, ::usersystem::LoginResponse>(
          [this](::grpc::ServerContext* context,
                 const ::usersystem::LoginRequest* request,
                 ::usersystem::LoginResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Login(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::usersystem::LoginRequest, ::usersystem::LoginResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::usersystem::LoginRequest, ::usersystem::LoginResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckLogin() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::usersystem::CheckLoginRequest, ::usersystem::CheckLoginResponse>(
          [this] { return this->CheckLogin(); }));
    }
    ~ExperimentalWithCallbackMethod_CheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLogin(::grpc::ServerContext* context, const ::usersystem::CheckLoginRequest* request, ::grpc::ServerWriter< ::usersystem::CheckLoginResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::usersystem::CheckLoginRequest, ::usersystem::CheckLoginResponse>* CheckLogin() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::usersystem::CheckLoginRequest, ::usersystem::CheckLoginResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Logout() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::usersystem::LogoutRequest, ::usersystem::CommonResponse>(
          [this](::grpc::ServerContext* context,
                 const ::usersystem::LogoutRequest* request,
                 ::usersystem::CommonResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Logout(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Logout(
        ::grpc::experimental::MessageAllocator< ::usersystem::LogoutRequest, ::usersystem::CommonResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::usersystem::LogoutRequest, ::usersystem::CommonResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Register<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_CheckLogin<ExperimentalWithCallbackMethod_Logout<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckLogin() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLogin(::grpc::ServerContext* context, const ::usersystem::CheckLoginRequest* request, ::grpc::ServerWriter< ::usersystem::CheckLoginResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckLogin() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLogin(::grpc::ServerContext* context, const ::usersystem::CheckLoginRequest* request, ::grpc::ServerWriter< ::usersystem::CheckLoginResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Register() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Register(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Register(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Login(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Login(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckLogin() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->CheckLogin(); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLogin(::grpc::ServerContext* context, const ::usersystem::CheckLoginRequest* request, ::grpc::ServerWriter< ::usersystem::CheckLoginResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CheckLogin() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Logout() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Logout(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Logout(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::usersystem::RegisterRequest, ::usersystem::RegisterResponse>(std::bind(&WithStreamedUnaryMethod_Register<BaseClass>::StreamedRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::usersystem::RegisterRequest* request, ::usersystem::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::usersystem::RegisterRequest,::usersystem::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::usersystem::LoginRequest, ::usersystem::LoginResponse>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::usersystem::LoginRequest* request, ::usersystem::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::usersystem::LoginRequest,::usersystem::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::usersystem::LogoutRequest, ::usersystem::CommonResponse>(std::bind(&WithStreamedUnaryMethod_Logout<BaseClass>::StreamedLogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::usersystem::LogoutRequest* request, ::usersystem::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::usersystem::LogoutRequest,::usersystem::CommonResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_CheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_CheckLogin() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::usersystem::CheckLoginRequest, ::usersystem::CheckLoginResponse>(std::bind(&WithSplitStreamingMethod_CheckLogin<BaseClass>::StreamedCheckLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_CheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckLogin(::grpc::ServerContext* context, const ::usersystem::CheckLoginRequest* request, ::grpc::ServerWriter< ::usersystem::CheckLoginResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedCheckLogin(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::usersystem::CheckLoginRequest,::usersystem::CheckLoginResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_CheckLogin<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithSplitStreamingMethod_CheckLogin<WithStreamedUnaryMethod_Logout<Service > > > > StreamedService;
};

}  // namespace usersystem


#endif  // GRPC_usersystem_2eproto__INCLUDED
